# Set up HTTP proxies from code.siemens.com
variables:
  http_proxy: "$CODE_PROXY"
  https_proxy: "$CODE_PROXY"
  no_proxy: "${CODE_NO_PROXY},rtf.siemens.net,tools.mobility.siemens.com"
  proxy_to_pass: "$CODE_PROXY"
  no_proxy_to_pass: "${CODE_NO_PROXY},rtf.siemens.net,tools.mobility.siemens.com"

build-toolchains:
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push" 
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE == "push" && $GITLAB_USER_LOGIN !~ /merge.meister.automation/
      when: manual
  parallel:
    matrix:
      - TARGET_DEB_ARCHITECTURE:
        - amd64  # x86_64
        SOURCE_DEB_ARCHITECTURE:
        - arm64  # aarch64
        - amd64  # x86_64
        DEBIAN_VERSION:
        - bullseye
        - bookworm
  image:
    name: debian:${DEBIAN_VERSION}
  script:
    - set -x
    - dpkg --add-architecture ${SOURCE_DEB_ARCHITECTURE}
    - apt-get update
    - apt-get -y install debootstrap zstd tar dpkg-dev curl gettext-base
    - bkup=$(dpkg-architecture -q DEB_TARGET_ARCH)
    # get GNU architectures for both source and destination
    - dpkg-architecture -A $TARGET_DEB_ARCHITECTURE
    - TARGET_GNU_ARCHITECTURE=$(dpkg-architecture -q DEB_TARGET_GNU_CPU | tr '_' '-')
    - dpkg-architecture -A $SOURCE_DEB_ARCHITECTURE
    - SOURCE_GNU_ARCHITECTURE=$(dpkg-architecture -q DEB_TARGET_GNU_CPU | tr '_' '-')
    - dpkg-architecture -A $bkup
    - env
    # different handling if source and target are the same
    - if [ $TARGET_DEB_ARCHITECTURE = $SOURCE_DEB_ARCHITECTURE ]; then
        debootstrap --download-only --variant minbase --include g++,libc6-dev --arch $SOURCE_DEB_ARCHITECTURE ${DEBIAN_VERSION} /chroot http://deb.debian.org/debian;
      else
        debootstrap --download-only --variant minbase --include g++-${TARGET_GNU_ARCHITECTURE}-linux-gnu,libc6-dev-${TARGET_DEB_ARCHITECTURE}-cross --arch $SOURCE_DEB_ARCHITECTURE ${DEBIAN_VERSION} /chroot http://deb.debian.org/debian/;
      fi
    - mkdir /toolchain
    # - LIST=$(echo "$GPP_PKGS $LIBC_DEV_PKGS" | tr ' ' '\n' | sort -u | tr '\n' ' ')
    # - for i in $LIST; do pkg=$(echo $i | sed s/:${SOURCE_DEB_ARCHITECTURE}\$//); dpkg -x /chroot/var/cache/apt/archives/${pkg}_*.deb /toolchain; done
    - for i in $(find /chroot/var/cache/apt/archives -type f); do dpkg -x $i /toolchain; done
    - export NAME="toolchain_${DEBIAN_VERSION}_${SOURCE_DEB_ARCHITECTURE}_${TARGET_DEB_ARCHITECTURE}"
    - export VERSION="0.1.0"
    - envsubst < MODULE.bazel.tmpl > /toolchain/MODULE.bazel
    - cd /toolchain
    - FILE="/$NAME.tar.zst"
    - tar c * | zstd -9 -o ${FILE}
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${FILE}
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$NAME/latest/${NAME}.tar.zst"'
